using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace csharp.project_euler
{
    public class Problems
    {
        public int Problem1()
        {
            /*
                If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
                Find the sum of all the multiples of 3 or 5 below 1000.
            */

            var result = 0;

            for (int i = 0; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                    result += i;
            }

            return result;
        }

        public long Problem2()
        {
            /*
                Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
                By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
            */

            long result = 0;

            var n1 = 0;
            var n2 = 1;
            var current = 0;

            while (current < 4000000)
            {
                current = n1 + n2;

                if (current % 2 == 0)
                    result += current;

                n1 = n2;
                n2 = current;
            }

            return result;
        }

        public int Problem3()
        {
            /*
                The prime factors of 13195 are 5, 7, 13 and 29.
                What is the largest prime factor of the number 600851475143?
            */

            var result = 0;

            var numberInQuestion = 600851475143;
            var primes = new List<int>() { 2 };

            var currentCheckValue = 2;
            var currentPossibleMaxPrime = numberInQuestion;

            while (currentCheckValue <= currentPossibleMaxPrime)
            {
                if (primes.Any(p => currentCheckValue % p == 0))
                {
                    currentCheckValue++;
                    continue;
                }

                primes.Add(currentCheckValue);

                foreach (var prime in primes)
                {
                    if (currentPossibleMaxPrime % prime == 0)
                    {
                        currentPossibleMaxPrime = currentPossibleMaxPrime / prime;
                    }
                }
                currentCheckValue++;
            }

            foreach (var prime in primes.OrderByDescending(p => p))
            {
                if (numberInQuestion % prime == 0)
                    return prime;
            }

            return result;
        }

        public int Problem4()
        {
            /*
                A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
                Find the largest palindrome made from the product of two 3-digit numbers.
            */

            var maxPalindrome = 0;
            (int i, int j) maxPalindromeCombo = (0, 0);

            for (int i = 999; i > 99; i--)
            {
                for (int j = 999; j > 99; j--)
                {
                    if (maxPalindromeCombo.i > Math.Max(i, j) && maxPalindromeCombo.j > Math.Max(i, j))
                    {
                        return maxPalindrome;
                    }
                    else
                    {
                        var product = i * j;

                        var reverseCharArray = product.ToString().ToCharArray();
                        Array.Reverse(reverseCharArray);
                        var reversedString = new string(reverseCharArray);

                        if (product.ToString() == reversedString)
                        {
                            if (product > maxPalindrome)
                            {
                                maxPalindrome = product;
                                maxPalindromeCombo.i = i;
                                maxPalindromeCombo.j = j;
                            }
                        }
                    }
                }
            }

            return maxPalindrome;
        }

        public int Problem5()
        {
            /*
                2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
                What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
            */

            var result = 1;
            var keepTrying = true;

            while (keepTrying)
            {
                // Console.WriteLine($"Currently checking on {result}");

                for (int i = 1; i <= 20; i++)
                {
                    if (result % 2520 == 0)
                    {
                        if (result % i == 0)
                        {
                            if (i == 20)
                            {
                                keepTrying = false;
                            }
                            else
                            {
                                continue;
                            }
                        }
                        else
                        {
                            result++;
                            break;
                        }
                    }
                    else
                    {
                        result++;
                        break;
                    }
                }
            }
            return result;
        }

        public int Problem6()
        {
            /*
                Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
            */

            var result = 0;
            var digitSum = 0;
            var squareOfSums = 0;
            var sumOfSquares = 0;

            for (int i = 0; i <= 100; i++)
            {
                digitSum += i;
                sumOfSquares += (i * i);
            }

            squareOfSums = digitSum * digitSum;
            result = squareOfSums - sumOfSquares;

            return result;
        }

        public int Problem7()
        {
            /*
                By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
                What is the 10001st prime number?
            */

            var currentCheckValue = 3;
            var currentPrimeNumber = 2;
            var primes = new List<int>() { 2 };
            var primeNumberCount = 1;

            while (primeNumberCount < 10001)
            {
                for (int i = 0; i < primes.Count; i++)
                {
                    if (currentCheckValue % primes[i] == 0)
                    {
                        currentCheckValue++;
                        break;
                    }
                    else
                    {
                        if (i == (primes.Count - 1))
                        {
                            currentPrimeNumber = currentCheckValue;
                            primes.Add(currentCheckValue);
                            primeNumberCount++;
                            currentCheckValue++;
                            break;
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }

            return currentPrimeNumber;
        }

        public long Problem8()
        {
            /*
                By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
                What is the 10001st prime number?
            */

            long highestProduct = 0;

            var bigHonkinNumber = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

            for (int i = 0; i < 987; i++)
            {
                var currentNumberString = bigHonkinNumber.Substring(i, 13);

                var digitas = currentNumberString.ToArray();

                long currentProduct = 1;

                foreach (var digit in digitas)
                {
                    currentProduct *= Int16.Parse(digit.ToString());
                }

                if (currentProduct > highestProduct)
                    highestProduct = currentProduct;
            }

            return highestProduct;
        }

        public long Problem9()
        {
            /*
                find a, b, and c: 

                a < b < c
                a + b + c = 1000
                a^2 + b^2 = c^2

            */

            for (int a = 1; a < 333; a++)
            {
                for (int b = a + 1; b < 500; b++)
                {
                    var c = 1000 - (a + b);
                    if ((a * a + b * b) == c * c)
                    {
                        Console.WriteLine($"we got it!!! a: {a}, b: {b}, c: {c}");
                        return a * b * c;
                    }
                }
            }

            return 0;
        }

        public long Problem10()
        {
            /*

            */

            var primes = new List<int>() { 2 };
            long primeSum = 2;

            for (int i = 2; i < 2000000; i++)
            {
                for (int j = 0; j < primes.Count; j++)
                {
                    if (i % primes[j] == 0)
                    {
                        break;
                    }
                    else if ( primes[j] > ((i / 2.0) + 1))
                    {
                        //Console.WriteLine($"Current prime: {i} - prime count: {primes.Count}");
                        if(primes.Count == 10000)
                            Console.WriteLine($"10001st prime is: {i}");

                        primes.Add(i);
                        primeSum += i;
                        break;
                    }
                    else if (j == (primes.Count - 1))
                    {
                        Console.WriteLine($"Current prime: {i} - prime count: {primes.Count}");
                        if(primes.Count == 10000)
                            Console.WriteLine($"10001st prime is: {i}");

                        primes.Add(i);
                        primeSum += i;
                    }
                }
            }

            return primeSum;
        }
    }
}