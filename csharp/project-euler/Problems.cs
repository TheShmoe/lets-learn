using System;
using System.Collections.Generic;
using System.Linq;

namespace csharp.project_euler
{
    public class Problems
    {
        public int Problem1()
        {
            /*
                If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
                Find the sum of all the multiples of 3 or 5 below 1000.
            */

            var result = 0;

            for (int i = 0; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                    result += i;
            }

            return result;
        }

        public long Problem2()
        {
            /*
                Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
                By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
            */

            long result = 0;

            var n1 = 0;
            var n2 = 1;
            var current = 0;

            while (current < 4000000)
            {
                current = n1 + n2;

                if (current % 2 == 0)
                    result += current;

                n1 = n2;
                n2 = current;
            }

            return result;
        }

        public int Problem3()
        {
            /*
                The prime factors of 13195 are 5, 7, 13 and 29.
                What is the largest prime factor of the number 600851475143?
            */

            var result = 0;

            var numberInQuestion = 600851475143;
            var primes = new List<int>() { 2 };

            var currentCheckValue = 2;
            var currentPossibleMaxPrime = numberInQuestion;

            while (currentCheckValue <= currentPossibleMaxPrime)
            {
                if (primes.Any(p => currentCheckValue % p == 0))
                {
                    currentCheckValue++;
                    continue;
                }

                primes.Add(currentCheckValue);

                foreach (var prime in primes)
                {
                    if (currentPossibleMaxPrime % prime == 0)
                    {
                        currentPossibleMaxPrime = currentPossibleMaxPrime / prime;
                    }
                }
                currentCheckValue++;
            }

            foreach (var prime in primes.OrderByDescending(p => p))
            {
                if (numberInQuestion % prime == 0)
                    return prime;
            }

            return result;
        }

        public int Problem4()
        {
            /*
                A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
                Find the largest palindrome made from the product of two 3-digit numbers.
            */

            var maxPalindrome = 0;
            (int i, int j) maxPalindromeCombo = (0, 0);

            for (int i = 999; i > 99; i--)
            {
                for (int j = 999; j > 99; j--)
                {
                    if (maxPalindromeCombo.i > Math.Max(i, j) && maxPalindromeCombo.j > Math.Max(i, j))
                    {
                        Console.WriteLine($"Found the max palindromic combination: {i} * {j} = {maxPalindrome}");
                        return maxPalindrome;
                    }
                    else
                    {
                        var product = i * j;

                        var reverseCharArray = product.ToString().ToCharArray();
                        Array.Reverse(reverseCharArray);
                        var reversedString = new string(reverseCharArray);

                        if (product.ToString() == reversedString)
                        {
                            if (product > maxPalindrome)
                            {
                                maxPalindrome = product;
                                maxPalindromeCombo.i = i;
                                maxPalindromeCombo.j = j;
                            }
                        }
                    }
                }
            }

            return maxPalindrome;
        }
    }
}